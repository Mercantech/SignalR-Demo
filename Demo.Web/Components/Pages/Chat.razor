@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject IJSRuntime JSRuntime

<PageTitle>SignalR Chat Demo</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-primary mb-4">SignalR Chat Demo</h1>
            
            @if (!isConnected)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h5>Forbind til chatten</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="userName" class="form-label">Dit navn:</label>
                                    <input type="text" class="form-control" id="userName" value="@userName" @oninput="OnUserNameInput" placeholder="Indtast dit navn" />
                                </div>
                                <button class="btn btn-primary" @onclick="ConnectToChat" disabled="@(string.IsNullOrEmpty(userName) || isConnecting)">
                                    @if (isConnecting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Forbinder...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-plug"></i> @("Forbind til Chat")
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Chat - Forbundet som: <strong>@userName</strong></h5>
                        <button class="btn btn-outline-danger btn-sm" @onclick="DisconnectFromChat">
                            <i class="fas fa-sign-out-alt"></i> Afbryd forbindelse
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="d-flex align-items-center">
                                        <span class="me-3"><strong>Status:</strong> 
                                            <span class="badge @(isConnected ? "bg-success" : "bg-danger")">
                                                @(isConnected ? "Forbundet" : "Afbrudt")
                                            </span>
                                        </span>
                                        <span class="me-3"><strong>Bruger:</strong> @userName</span>
                                        <span class="text-muted">@(messages.Count) beskeder</span>
                                    </div>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="ClearMessages">
                                        <i class="fas fa-trash"></i> Ryd beskeder
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Chat Beskeder</h5>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ClearMessages">
                            <i class="fas fa-trash"></i> Ryd beskeder
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div id="chatMessages" class="chat-messages" style="height: 400px; overflow-y: auto; padding: 15px; background-color: #f8f9fa;">
                            @foreach (var message in messages)
                            {
                                <div class="message @(message.IsSystem ? "system-message" : (message.IsOwnMessage ? "own-message" : "other-message")) mb-2">
                                    <div class="d-flex justify-content-between">
                                        <strong class="@(message.IsSystem ? "text-info" : (message.IsOwnMessage ? "text-success" : "text-primary"))">@message.User</strong>
                                        <small class="text-muted">@message.Timestamp.ToString("HH:mm:ss")</small>
                                    </div>
                                    <div class="message-content">@message.Content</div>
                                </div>
                            }
                            @{
                                List<string> currentTypingUsers;
                                lock (typingUsersLock)
                                {
                                    currentTypingUsers = new List<string>(typingUsers);
                                }
                            }
                            @if (currentTypingUsers.Any())
                            {
                                <div class="typing-indicator">
                                    <em class="text-muted">
                                        @string.Join(", ", currentTypingUsers) @(currentTypingUsers.Count == 1 ? "skriver..." : "skriver...")
                                    </em>
                                </div>
                            }
                        </div>
                        
                        <!-- Chat Input i bunden -->
                        <div class="chat-input p-3 border-top">
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control" 
                                       @bind="messageInput" 
                                       @oninput="OnMessageInput"
                                       @onkeypress="@(async (e) => { if (e.Key == "Enter") await SendMessage(); })" 
                                       placeholder="Skriv din besked her..." 
                                       disabled="@(string.IsNullOrEmpty(userName))" />
                                <button class="btn btn-primary" 
                                        @onclick="SendMessage" 
                                        disabled="@(string.IsNullOrEmpty(messageInput))">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private bool isConnecting = false;
    private string userName = "";
    private string messageInput = "";
    private List<ChatMessage> messages = new();
    private List<string> typingUsers = new();
    private readonly object typingUsersLock = new object();

    public class ChatMessage
    {
        public string User { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public bool IsSystem { get; set; }
        public bool IsOwnMessage { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        // Initialize empty
        return Task.CompletedTask;
    }

    private void OnUserNameInput(ChangeEventArgs e)
    {
        userName = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private async Task OnMessageInput(ChangeEventArgs e)
    {
        messageInput = e.Value?.ToString() ?? "";
        
        // Send typing indicator
        if (!string.IsNullOrEmpty(messageInput) && hubConnection != null)
        {
            await hubConnection.InvokeAsync("SendTypingIndicator", userName);
        }
        
        StateHasChanged();
    }

    private async Task ConnectToChat()
    {
        if (string.IsNullOrEmpty(userName)) return;

        isConnecting = true;
        StateHasChanged();

        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5332/chathub")
                .WithAutomaticReconnect()
                .Build();

            // Event handlers
            hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, timestamp) =>
            {
                messages.Add(new ChatMessage 
                { 
                    User = user, 
                    Content = message, 
                    Timestamp = timestamp,
                    IsSystem = false,
                    IsOwnMessage = user == userName
                });
                InvokeAsync(StateHasChanged);
                _ = ScrollToBottom();
            });

            hubConnection.On<string, string>("UserJoined", (user, message) =>
            {
                messages.Add(new ChatMessage 
                { 
                    User = user, 
                    Content = message, 
                    Timestamp = DateTime.Now,
                    IsSystem = true
                });
                InvokeAsync(StateHasChanged);
                _ = ScrollToBottom();
            });

            hubConnection.On<string, string>("UserLeft", (user, message) =>
            {
                messages.Add(new ChatMessage 
                { 
                    User = user, 
                    Content = message, 
                    Timestamp = DateTime.Now,
                    IsSystem = true
                });
                InvokeAsync(StateHasChanged);
                _ = ScrollToBottom();
            });


            hubConnection.On<string>("UserTyping", (user) =>
            {
                lock (typingUsersLock)
                {
                    if (!typingUsers.Contains(user))
                    {
                        typingUsers.Add(user);
                    }
                }
                InvokeAsync(StateHasChanged);
                
                // Remove typing indicator after 3 seconds
                _ = Task.Delay(3000).ContinueWith(_ => {
                    lock (typingUsersLock)
                    {
                        if (typingUsers.Contains(user))
                        {
                            typingUsers.Remove(user);
                        }
                    }
                    InvokeAsync(StateHasChanged);
                });
            });

            hubConnection.On<string>("UserStoppedTyping", (user) =>
            {
                lock (typingUsersLock)
                {
                    typingUsers.Remove(user);
                }
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            
            // Register user with the hub
            await hubConnection.InvokeAsync("RegisterUser", userName);
            
            isConnected = true;
            isConnecting = false;
            
            // Add connection success message
            messages.Add(new ChatMessage 
            { 
                User = "System", 
                Content = $"Forbundet til chatten som {userName}", 
                Timestamp = DateTime.Now,
                IsSystem = true
            });
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isConnecting = false;
            // Handle connection error
            messages.Add(new ChatMessage 
            { 
                User = "System", 
                Content = $"Fejl ved forbindelse: {ex.Message}", 
                Timestamp = DateTime.Now,
                IsSystem = true
            });
            StateHasChanged();
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }

    private async Task DisconnectFromChat()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }
        isConnected = false;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.InvokeAsync("SendMessage", userName, messageInput);
            await hubConnection.InvokeAsync("SendStoppedTypingIndicator", userName);
            
            messageInput = "";
            StateHasChanged();
        }
    }


    private void ClearMessages()
    {
        messages.Clear();
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
